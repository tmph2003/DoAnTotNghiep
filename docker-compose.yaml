x-superset-depends-on: &superset-depends-on
  - postgres
  - redis
x-superset-volumes: &superset-volumes
  - ./containers/superset:/app/docker
  - ./data/superset_home:/app/superset_home

x-common-build: &common-build
  image: tmph2003/superset:latest

x-airflow-common: &airflow-common
  image: tmph2003/airflow-doan:latest
  env_file:
    - .env
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE_TEST_CONNECTION: 'Enabled'
    AIRFLOW__COSMOS__DBT_DOCS_DIR: "s3://dbt-docs"
    AIRFLOW__COSMOS__DBT_DOCS_CONN_ID: "minio"
    AIRFLOW__WEBSERVER__RELOAD_ON_PLUGIN_CHANGE: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: '60'
    AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT: '60'
    AIRFLOW__SCHEDULER__SCHEDULER_HEALTH_CHECK_THRESHOLD: '240'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: '0'
    TZ: 'Asia/Ho_Chi_Minh'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/app/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/app/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/app/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/include:/app/include
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - 15432:5432
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
      - ./containers/postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - data-network

  redis:
    image: redis:latest
    expose:
      - 6379
    ports:
      - 6379:6379
    volumes:
      - ./data/rddata:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    networks:
      - data-network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8088:8080"
      - "8888:8888"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - data-network

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - data-network

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck: # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@localhost:15432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@localhost:15432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@localhost:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE_TEST_CONNECTION: 'Enabled'
      AIRFLOW__COSMOS__DBT_DOCS_DIR: "s3://dbt-docs"
      AIRFLOW__COSMOS__DBT_DOCS_CONN_ID: "minio"
      AIRFLOW__WEBSERVER__RELOAD_ON_PLUGIN_CHANGE: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: '60'
      AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT: '60'
      AIRFLOW__SCHEDULER__SCHEDULER_HEALTH_CHECK_THRESHOLD: '240'
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: '0'
      TZ: 'Asia/Ho_Chi_Minh'
      DUMB_INIT_SETSID: "0"
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/app/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/app/logs
      - ${AIRFLOW_PROJ_DIR:-.}/plugins:/app/plugins
      - ${AIRFLOW_PROJ_DIR:-.}/include:/app/include
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    network_mode: host

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - data-network

  ####################################################################################################
  # Trino
  ####################################################################################################
  # trino-master:
  #   image: trinodb/trino:460
  #   ports:
  #     - 8080:8080
  #   volumes: # - ./containers/trino/catalog:/etc/trino/catalog
  #     - ./containers/trino/etc-coordinator:/etc/trino
  #   networks:
  #     - data-network

  # hive-metastore:
  #   hostname: hive-metastore
  #   image: starburstdata/hive:3.1.3-e.10
  #   ports:
  #     - '9083:9083' # Metastore Thrift
  #   environment:
  #     HIVE_METASTORE_DRIVER: org.postgresql.Driver
  #     HIVE_METASTORE_JDBC_URL: jdbc:postgresql://postgres:5432/metastore
  #     HIVE_METASTORE_USER: hive
  #     HIVE_METASTORE_PASSWORD: hive
  #     HIVE_METASTORE_WAREHOUSE_DIR: s3://datalake/
  #     S3_ENDPOINT: http://minio:9000
  #     S3_ACCESS_KEY: minio
  #     S3_SECRET_KEY: minio123
  #     S3_PATH_STYLE_ACCESS: "true"
  #     REGION: "us-east-1"
  #     HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - data-network

  # minio:
  #   hostname: minio
  #   image: 'minio/minio'
  #   ports:
  #     - '9000:9000'
  #     - '9001:9001'
  #   environment:
  #     MINIO_ROOT_USER: minio
  #     MINIO_ROOT_PASSWORD: minio123
  #     MINIO_DOMAIN: minio
  #   command: server /data --console-address ":9001"
  #   volumes:
  #     - ./data:/data
  #   networks:
  #     - data-network

  # minio-job:
  #   image: 'minio/mc'
  #   hostname: minio-job
  #   entrypoint: |
  #     /bin/bash -c "
  #     sleep 5;
  #     /usr/bin/mc config --quiet host add myminio http://minio:9000 minio minio123 || true;
  #     /usr/bin/mc mb --quiet myminio/datalake || true;
  #     /usr/bin/mc mb --quiet myminio/staging || true;
  #     "
  #   environment:
  #     - AWS_ACCESS_KEY_ID=minio
  #     - AWS_SECRET_ACCESS_KEY=minio123
  #     - AWS_REGION=us-east-1
  #     - AWS_DEFAULT_REGION=us-east-1
  #     - S3_ENDPOINT=http://minio:9000
  #     - S3_PATH_STYLE_ACCESS=true
  #   depends_on:
  #     - minio
  #   networks:
  #     - data-network

  ####################################################################################################
  # Chatwoot:
  ####################################################################################################
  # base: &base
  #   image: chatwoot/chatwoot:latest
  #   env_file: .env ## Change this file for customized env variables
  #   volumes:
  #     - /data/storage:/app/storage
  # rails:
  #   <<: *base
  #   depends_on:
  #     - postgres
  #   ports:
  #     - '127.0.0.1:3000:3000'
  #   environment:
  #     - NODE_ENV=production
  #     - RAILS_ENV=production
  #     - INSTALLATION_ENV=docker
  #   command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']
  #   networks:
  #     - data-network

  # sidekiq:
  #   <<: *base
  #   depends_on:
  #     - postgres
  #   environment:
  #     - NODE_ENV=production
  #     - RAILS_ENV=production
  #     - INSTALLATION_ENV=docker
  #   command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
  #   networks:
  #     - data-network

  ####################################################################################################
  # Superset:
  ####################################################################################################

  superset:
    image: tmph2003/superset:latest
    env_file:
      - path: containers/superset/.env # default
        required: true
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8089:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    networks:
      - data-network

  superset-init:
    image: tmph2003/superset:latest
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: containers/superset/.env # default
        required: true
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - data-network

  superset-worker:
    image: tmph2003/superset:latest
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file:
      - path: containers/superset/.env # default
        required: true
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    networks:
      - data-network

  superset-worker-beat:
    image: tmph2003/superset:latest
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file:
      - path: containers/superset/.env # default
        required: true
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - data-network
  
  ####################################################################################################
  # Clickhouse:
  ####################################################################################################
  clickhouse:
    image: clickhouse/clickhouse-server:latest-alpine
    container_name: clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
    - 18123:8123
    - 9002:9000
    networks:
      - data-network
    volumes:
      - ./containers/clickhouse/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
      - ./containers/clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./containers/clickhouse/users.xml:/etc/clickhouse-server/users.xml
      - ./data/clickhouse-data:/var/lib/clickhouse
volumes:
  pgdata:
  rddata:
  mdata:
networks:
  data-network: